---
- name: Install prerequisite packages (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
    - ca-certificates
    - curl
    - apt-transport-https
    - gnupg
    - jq
    - gzip
    state: present
  when: ansible_os_family == 'Debian'

- name: Install prerequisite packages (RHEL/CentOS)
  ansible.builtin.yum:
    name:
    - ca-certificates
    - curl
    - gnupg2
    - jq
    - gzip
    - yum-utils
    state: present
  when: ansible_os_family == 'RedHat'

- name: Get current Kubernetes version (from control plane nodes)
  ansible.builtin.shell: |
    kubectl version --output=json 2>/dev/null | jq -r '.serverVersion.gitVersion' | sed 's/^v//' || echo "null"
  args:
    executable: /bin/bash
  register: current_k8s_version
  changed_when: false
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: "'master' in group_names or 'controlplane' in group_names"

- name: Get current Kubernetes version (from worker nodes)
  ansible.builtin.shell: |
    kubelet --version | awk '{print $2}' | sed 's/^v//' || echo "null"
  args:
    executable: /bin/bash
  register: current_k8s_version
  changed_when: false
  when: "'worker' in group_names"

- name: Set current version fact
  ansible.builtin.set_fact:
    current_version: "{{ current_k8s_version.stdout }}"

- name: Get available kubeadm versions (Debian/Ubuntu)
  block:
  - name: Fetch versions from Kubernetes repository
    ansible.builtin.shell: |
      # Try new repository structure
      versions=$(curl -s https://pkgs.k8s.io/core:/stable:/v{{ current_version.split('.')[0:2]|join('.') }}/deb/dists/stable/Release |
                 grep -E '^Version: [0-9]+\.[0-9]+\.[0-9]+' | awk '{print $2}' | sort -Vu)

      # Fallback to legacy structure if empty
      if [ -z "$versions" ]; then
        versions=$(curl -s https://packages.cloud.google.com/apt/dists/kubernetes-xenial/main/binary-amd64/Packages |
                  grep -E '^Package: kubeadm$' -A 5 | grep Version | awk '{print $2}' | sort -Vu)
      fi

      echo "$versions"
    args:
      executable: /bin/bash
    register: available_versions
    changed_when: false

  - name: Fallback to apt-cache if repository check fails
    ansible.builtin.shell: |
      apt-get update >/dev/null 2>&1
      apt-cache madison kubeadm | awk '{print $3}' | sort -Vu
    args:
      executable: /bin/bash
    register: available_versions
    changed_when: false
    when: available_versions.stdout == ""

  rescue:
  - name: Set empty versions if all methods fail
    ansible.builtin.set_fact:
      available_versions: { stdout: "" }
  when:
  - ansible_os_family == 'Debian'
  - current_version != "null"

- name: Get available kubeadm versions (RHEL/CentOS)
  block:
  - name: Fetch versions from Kubernetes repository
    ansible.builtin.shell: |
      # Try new repository structure
      versions=$(curl -s https://pkgs.k8s.io/core:/stable:/v{{ current_version.split('.')[0:2]|join('.') }}/rpm/repodata/primary.xml.gz |
                 gzip -dc | grep -oP 'kubeadm-\K\d+\.\d+\.\d+' | sort -Vu)

      # Fallback to legacy structure if empty
      if [ -z "$versions" ]; then
        versions=$(curl -s https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64/repodata/primary.xml.gz |
                  gzip -dc | grep -oP 'kubeadm-\K\d+\.\d+\.\d+' | sort -Vu)
      fi

      echo "$versions"
    args:
      executable: /bin/bash
    register: available_versions
    changed_when: false

  - name: Fallback to yum if repository check fails
    ansible.builtin.shell: |
      yum clean all >/dev/null 2>&1
      yum --showduplicates list kubeadm | grep kubeadm | awk '{print $2}' | sort -Vu
    args:
      executable: /bin/bash
    register: available_versions
    changed_when: false
    when: available_versions.stdout == ""

  rescue:
  - name: Set empty versions if all methods fail
    ansible.builtin.set_fact:
      available_versions: { stdout: "" }
  when:
  - ansible_os_family == 'RedHat'
  - current_version != "null"

- name: Determine next version
  ansible.builtin.set_fact:
    next_version: "{{ (available_versions.stdout_lines | select('match', '^' + current_version.split('.')[0:2]|join('.') + '\\.') | list | sort | last) | default('') }}"
  when:
  - available_versions.stdout_lines is defined
  - available_versions.stdout_lines | length > 0
  - current_version != "null"

- name: Show version information
  ansible.builtin.debug:
    msg: |
      Version Information:
      - Current Kubernetes version: {{ current_version }}
      - Available kubeadm versions: {{ available_versions.stdout_lines | default([]) | join(', ') }}
      - Recommended next version: {{ next_version | default('None available') }}

- name: Clean up existing Kubernetes repository
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
  - /etc/apt/sources.list.d/kubernetes.list
  - /usr/share/keyrings/kubernetes-apt-keyring.gpg
  - /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: ansible_os_family == 'Debian'

- name: Create keyring directory if needed
  ansible.builtin.file:
    path: /usr/share/keyrings
    state: directory
    mode: '0755'
  when: ansible_os_family == 'Debian'

- name: Add Kubernetes GPG key (Debian/Ubuntu)
  ansible.builtin.apt_key:
    url: "https://pkgs.k8s.io/core:/stable:/v{{ (next_version|default(current_version)).split('.')[0:2]|join('.') }}/deb/Release.key"
    keyring: /usr/share/keyrings/kubernetes-apt-keyring.gpg
    state: present
  when:
  - ansible_os_family == 'Debian'
  - current_version != "null"

- name: Add Kubernetes repository (Debian/Ubuntu)
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ (next_version|default(current_version)).split('.')[0:2]|join('.') }}/deb/ /"
    state: present
    filename: kubernetes
    update_cache: yes
  when:
  - ansible_os_family == 'Debian'
  - current_version != "null"

- name: Add Kubernetes repository (RHEL/CentOS/Rocky)
  ansible.builtin.yum_repository:
    name: kubernetes
    description: Kubernetes
    baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ (next_version|default(current_version)).split('.')[0:2]|join('.') }}/rpm/"
    enabled: true
    gpgcheck: true
    repo_gpgcheck: true
    gpgkey: "https://pkgs.k8s.io/core:/stable:/v{{ (next_version|default(current_version)).split('.')[0:2]|join('.') }}/rpm/repodata/repomd.xml.key"
  when:
  - ansible_os_family == 'RedHat'
  - current_version != "null"

- name: Update package cache
  ansible.builtin.package:
    update_cache: yes

- name: Verify repository setup
  ansible.builtin.command: |
    {% if ansible_os_family == 'Debian' %}
    apt-cache policy kubeadm
    {% elif ansible_os_family == 'RedHat' %}
    yum --showduplicates list kubeadm
    {% endif %}
  register: repo_verification
  changed_when: false

- name: Show repository verification
  ansible.builtin.debug:
    var: repo_verification.stdout_lines
