---
- name: Validate upgrade prerequisites (RHEL)
  block:
  - name: Verify kube_upgrade_full_version is set
    ansible.builtin.assert:
      that:
      - kube_upgrade_full_version is defined
      - kube_upgrade_full_version != ""
      fail_msg: "kube_upgrade_full_version must be defined for package upgrades"
    tags: upgrade

  - name: Verify kube_config is set
    ansible.builtin.assert:
      that: kube_config is defined
      fail_msg: "kube_config must be defined for kubectl operations"
    tags: upgrade

  - name: Verify kubectl is available (first master check)
    ansible.builtin.command: which kubectl
    register: kubectl_check
    changed_when: false
    tags: upgrade

  - name: Fail if kubectl not found
    ansible.builtin.fail:
      msg: "kubectl not found on this host"
    when: kubectl_check.rc != 0
    tags: upgrade

- name: Drain first master node (special handling)
  block:
  - name: Get node name
    ansible.builtin.command: hostname -s
    register: node_hostname
    changed_when: false
    tags: upgrade

  # - name: Check if this is first master
  #   ansible.builtin.set_fact:
  #     is_first_master: "{{ inventory_hostname == groups['masters'][0] }}"
  #   tags: upgrade

  - name: Drain node (first master)
    ansible.builtin.shell: |
      kubectl --kubeconfig {{ kube_config }}  drain {{ node_hostname.stdout }} \
      --ignore-daemonsets \
      --delete-emptydir-data \
      --force \
      --timeout={{ drain_timeout }}s
    args:
      executable: /bin/bash
    remote_user: ansible
    delegate_to: "{{ groups['masters'][0] }}"
    register: drain_result
    ignore_errors: true
    # until: drain_result.rc == 0
    # environment:
    #   KUBECONFIG: "/etc/kubernetes/admin.conf"
    # environment:
    #   KUBECONFIG: "{{ kube_config | default('/etc/kubernetes/admin.conf') }}"
  - name: Verify first master drain succeeded
    ansible.builtin.assert:
      that:
      - not is_first_master or drain_result.rc == 0 or "evicting pods" in (drain_result.stdout | default(''))
      fail_msg: |
        First master drain failed on {{ node_hostname.stdout }}
        Error: {{ drain_result.stderr | default('No error output') }}
        Output: {{ drain_result.stdout | default('No output') }}
    tags: upgrade

- name: Upgrade Kubernetes components (RHEL)
  block:
  - name: Verify package repository availability
    ansible.builtin.command: yum list available kubelet-{{ kube_upgrade_full_version }}
    register: pkg_check
    changed_when: false
    tags: upgrade

  - name: Fail if package not available
    ansible.builtin.fail:
      msg: "Package kubelet-{{ kube_upgrade_full_version }} not available in repositories"
    when: pkg_check.rc != 0
    tags: upgrade

  - name: Install kubelet version
    ansible.builtin.yum:
      name: "kubelet-{{ kube_upgrade_full_version }}"
      state: present
      disable_excludes: kubernetes
    async: "{{ package_install_timeout }}"
    poll: 0
    register: kubelet_install
    tags: upgrade

  - name: Wait for kubelet installation to complete
    ansible.builtin.async_status:
      jid: "{{ kubelet_install.ansible_job_id }}"
    register: kubelet_job_result
    until: kubelet_job_result.finished
    retries: "{{ (package_install_timeout|int / 10)|int + 1 }}"
    delay: 10
    tags: upgrade

  - name: Verify kubelet installation
    ansible.builtin.assert:
      that:
      - kubelet_job_result.finished
      - kubelet_job_result.rc == 0
      fail_msg: "Failed to install kubelet within timeout period"
    tags: upgrade

  - name: Install kubectl version
    ansible.builtin.yum:
      name: "kubectl-{{ kube_upgrade_full_version }}"
      state: present
      disable_excludes: kubernetes
    async: "{{ package_install_timeout }}"
    poll: 0
    register: kubectl_install
    tags: upgrade

  - name: Wait for kubectl installation to complete
    ansible.builtin.async_status:
      jid: "{{ kubectl_install.ansible_job_id }}"
    register: kubectl_job_result
    until: kubectl_job_result.finished
    retries: "{{ (package_install_timeout|int / 10)|int + 1 }}"
    delay: 10
    tags: upgrade

  - name: Verify kubectl installation
    ansible.builtin.assert:
      that:
      - kubectl_job_result.finished
      - kubectl_job_result.rc == 0
      fail_msg: "Failed to install kubectl within timeout period"
    tags: upgrade

  - name: Show installed kubelet version
    ansible.builtin.command: rpm -q kubelet --qf '%{VERSION}-%{RELEASE}\n'
    register: kubelet_rpm
    changed_when: false
    tags: upgrade

  - name: Debug kubelet installation
    ansible.builtin.debug:
      msg: "Installed kubelet version: {{ kubelet_rpm.stdout }}"
    tags: upgrade

- name: Restart and verify services (RHEL)
  block:
  - name: Reload systemd daemon
    ansible.builtin.systemd:
      daemon_reload: yes
    tags: upgrade

  - name: Restart kubelet service
    ansible.builtin.service:
      name: kubelet
      state: restarted
      enabled: yes
    tags: upgrade

  - name: Verify kubelet version
    ansible.builtin.command: sudo kubelet --version  --kubeconfig /home/ansible/.kube/config
    register: kubelet_version_check
    changed_when: false
    tags: upgrade
  #--kubeconfig={{ kube_config | default('/etc/kubernetes/admin.conf') }}
- name: Uncordon first master node
  ansible.builtin.shell: |
    kubectl --kubeconfig {{ kube_config }}   uncordon {{ node_hostname.stdout }} 2>&1 | tee /tmp/uncordon.log
  args:
    executable: /bin/bash
  delegate_to: "{{ groups['masters'][0] }}"
  register: uncordon_result
  # retries: 5
  # delay: 10
  until: uncordon_result.rc == 0
  # environment:
  #   KUBECONFIG: "/etc/kubernetes/admin.conf"
  tags:
  - uncordon
  - upgrade

# Debug messages to print the uncordon_result
- name: Debug - Show uncordon result
  ansible.builtin.debug:
    var: uncordon_result
    verbosity: 1
  when: uncordon_result is defined
  tags:
  - uncordon
  - debug

- name: Debug - Show uncordon stdout
  ansible.builtin.debug:
    msg: "Uncordon stdout: {{ uncordon_result.stdout }}"
  when: uncordon_result.stdout | length > 0
  tags:
  - uncordon
  - debug

- name: Debug - Show uncordon stderr
  ansible.builtin.debug:
    msg: "Uncordon stderr: {{ uncordon_result.stderr }}"
  when: uncordon_result.stderr | length > 0
  tags:
  - uncordon
  - debug

- name: Debug - Show uncordon log file
  ansible.builtin.command: cat /tmp/uncordon.log
  register: uncordon_log
  changed_when: false
  delegate_to: "{{ groups['masters'][0] }}"
  when: uncordon_result is changed
  tags:
  - uncordon
  - debug

- name: Restore excludes
  ansible.builtin.lineinfile:
    path: /etc/yum.repos.d/kubernetes-1.repo
    insertafter: '^\[kubernetes\]'
    line: 'exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni'
