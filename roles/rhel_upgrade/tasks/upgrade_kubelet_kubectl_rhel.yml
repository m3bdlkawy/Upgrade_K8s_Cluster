---
- name: Validate upgrade prerequisites (RHEL)
  block:
  - name: Verify kube_upgrade_full_version is set
    ansible.builtin.assert:
      that:
      - kube_upgrade_full_version is defined
      - kube_upgrade_full_version != ""
      fail_msg: "kube_upgrade_full_version must be defined for package upgrades"
    tags: upgrade

  - name: Verify kube_config is set
    ansible.builtin.assert:
      that: kube_config is defined
      fail_msg: "kube_config must be defined for kubectl operations"
    tags: upgrade

  - name: Verify kubectl is available (first master check)
    ansible.builtin.command: which kubectl
    register: kubectl_check
    changed_when: false
    tags: upgrade

  - name: Fail if kubectl not found
    ansible.builtin.fail:
      msg: "kubectl not found on this host"
    when: kubectl_check.rc != 0
    tags: upgrade

- name: Drain first master node (special handling)
  block:
  - name: Get node name
    ansible.builtin.command: hostname -s
    register: node_hostname
    changed_when: false
    tags: upgrade

  - name: Drain node (first master)
    ansible.builtin.shell: |
      kubectl --kubeconfig {{ kube_config }} drain {{ node_hostname.stdout }} \
      --ignore-daemonsets \
      --delete-emptydir-data \
      --force \
      --timeout={{ drain_timeout }}s
    args:
      executable: /bin/bash
    delegate_to: "{{ groups['masters'][0] }}"
    register: drain_result
    ignore_errors: true
    tags: upgrade

  - name: Verify first master drain succeeded
    ansible.builtin.assert:
      that:
      - drain_result.rc == 0 or "evicting pods" in (drain_result.stdout | default(''))
      fail_msg: |
        First master drain failed on {{ node_hostname.stdout }}
        Error: {{ drain_result.stderr | default('No error output') }}
        Output: {{ drain_result.stdout | default('No output') }}
    tags: upgrade

- name: Upgrade Kubernetes components (RHEL)
  block:
  - name: Verify package repository availability
    ansible.builtin.command: >
      yum list available kubelet-{{ kube_upgrade_full_version }} --disablerepo=*  --enablerepo=kubernetes-v*
    register: pkg_check
    changed_when: false
    tags: upgrade

  - name: Fail if package not available
    ansible.builtin.fail:
      msg: "Package kubelet-{{ kube_upgrade_full_version }} not available in repositories"
    when: pkg_check.rc != 0
    tags: upgrade

  - name: Install kubelet version
    ansible.builtin.yum:
      name: "kubelet-{{ kube_upgrade_full_version }}"
      state: present
      disable_excludes: Upgrade_kubernetes
    async: "{{ package_install_timeout }}"
    poll: 0
    register: kubelet_install
    tags: upgrade

  - name: Wait for kubelet installation to complete
    ansible.builtin.async_status:
      jid: "{{ kubelet_install.ansible_job_id }}"
    register: kubelet_job_result
    until: kubelet_job_result.finished
    retries: "{{ (package_install_timeout|int / 10)|int + 1 }}"
    delay: 10
    tags: upgrade

  - name: Install kubectl version
    ansible.builtin.yum:
      name: "kubectl-{{ kube_upgrade_full_version }}"
      state: present
      disable_excludes: Upgrade_kubernetes
    async: "{{ package_install_timeout }}"
    poll: 0
    register: kubectl_install
    tags: upgrade

  - name: Wait for kubectl installation to complete
    ansible.builtin.async_status:
      jid: "{{ kubectl_install.ansible_job_id }}"
    register: kubectl_job_result
    until: kubectl_job_result.finished
    retries: "{{ (package_install_timeout|int / 10)|int + 1 }}"
    delay: 10
    tags: upgrade

- name: Restart and verify services (RHEL)
  block:
  - name: Reload systemd daemon
    ansible.builtin.systemd:
      daemon_reload: yes
    tags: upgrade

  - name: Restart kubelet service
    ansible.builtin.service:
      name: kubelet
      state: restarted
      enabled: yes
    tags: upgrade

  - name: Verify kubelet version
    ansible.builtin.command: kubelet --version
    register: kubelet_version_check
    changed_when: false
    tags: upgrade

- name: Uncordon first master node
  ansible.builtin.shell: |
    kubectl --kubeconfig {{ kube_config }} uncordon {{ node_hostname.stdout }}
  args:
    executable: /bin/bash
  delegate_to: "{{ groups['masters'][0] }}"
  register: uncordon_result
  until: uncordon_result.rc == 0
  tags: upgrade

- name: Display comprehensive upgrade summary
  ansible.builtin.debug:
    msg: |
      ==================== KUBERNETES UPGRADE SUMMARY ====================
      Upgrade Details:
      - Target Version: {{ kube_upgrade_full_version }}
      - Repository Used: Upgrade_kubernetes

      Package Status:
      - kubelet: {{ kubelet_rpm.stdout if kubelet_rpm is defined else 'Not installed' }}
      - Running kubelet version: {{ kubelet_version_check.stdout if kubelet_version_check is defined else 'Unknown' }}

      Node Operations:
      - Drain Status: {{ 'Success' if drain_result.rc == 0 else 'Failed' }}
      - Uncordon Status: {{ 'Success' if uncordon_result.rc == 0 else 'Failed' }}

      Cluster Status:
      {% if node_versions is defined and node_versions.stdout != '' %}
      {{ node_versions.stdout | indent(width=8) }}
      {% else %}
      - Node versions could not be retrieved
      {% endif %}

      ===================================================================
  delegate_to: "{{ groups['masters'][0] }}"
  tags: upgrade

- name: Find all Kubernetes repo files
  ansible.builtin.find:
    paths: /etc/yum.repos.d/
    patterns:
    - "kubernetes-v*.repo"
    - "kubernetes.repo"
    use_regex: no
  register: kubernetes_repo_files
  tags: upgrade

- name: Restore excludes in all Kubernetes repo files
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    insertafter: '^\[kubernetes\]'
    line: 'exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni'
    state: present
  loop: "{{ kubernetes_repo_files.files }}"
  when: kubernetes_repo_files.matched > 0
  tags: upgrade
